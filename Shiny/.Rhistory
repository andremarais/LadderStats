ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
}
mp <- multiplot(plots[[1]],plots[[2]], cols = 1)
return(mp)
})
runeplot(RuneSample, "Barbarian")
BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset[i] <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset
runes.subset <- data.frame(t(table(runes.subset[i])))[,2:3]
runes.subset
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
RuneSample[i]
runes[[i]][,3] <- RuneSample[i]
runes
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
runes
runes.subset
runes.subset <- data.frame(t(table(runes.subset)))[,2:3]
ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
### Rune Graph Function
runeplot <- function(RuneSample, Class) ({
if(Class == "Barbarian") {
BData <- bscv
} else if(Class == "Crusader") {
BData <- cscv
} else if(Class == "DemonHunter") {
BData <- dhscv
} else if(Class == "Monk") {
BData <- mscv
} else if(Class == "WitchDoctor") {
BData <- wdscv
} else if(Class == "Wizard") {
BData <- wscv
}
runes <- list(list())
plots <- list()
for (i in 1:length(RuneSample)) {
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,2:3]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
}
mp <- multiplot(plots[[1]],plots[[2]], cols = 1)
return(mp)
})
runeplot(RuneSample, "Barbarian")
runeplot(RuneSample, "Barbarian")
RuneSample
i
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,2:3]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
plots[[1]]
plots[[2]]
ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
runes
RuneSample
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,2:3]
runes.subset
runes.subset <-droplevels(runes.subset)
runes.subset
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset
runes.subset <-droplevels(runes.subset)
runes.subset
table(runes.subset$Rune)
runes.subset <- data.frame(t(table(runes.subset$Rune)))[,2:3]
runes.subset
runes.subset <- data.frame(t(table(runes.subset$Rune)))[,2:3]
runes.subset
runes.subset[,1]
runes.subset <- data.frame(t(table(runes.subset[,1])))[,2:3]
runes.subset
runes.subset
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset
runes.subset <-droplevels(runes.subset)
table(runes.subset)
t(table(runes.subset))
data.frame(t(table(runes.subset)))
data.frame(t(table(runes.subset)))[,c(1,3)]
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes
runes[[i]][,3] <- RuneSample[i]
runes
### Rune Graph Function
runeplot <- function(RuneSample, Class) ({
if(Class == "Barbarian") {
BData <- bscv
} else if(Class == "Crusader") {
BData <- cscv
} else if(Class == "DemonHunter") {
BData <- dhscv
} else if(Class == "Monk") {
BData <- mscv
} else if(Class == "WitchDoctor") {
BData <- wdscv
} else if(Class == "Wizard") {
BData <- wscv
}
runes <- list(list())
plots <- list()
for (i in 1:length(RuneSample)) {
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
}
mp <- multiplot(plots[[1]],plots[[2]], cols = 1)
return(mp)
})
runeplot(RuneSample, "Barbarian")
### Rune Graph Function
runeplot <- function(RuneSample, Class) ({
if(Class == "Barbarian") {
BData <- bscv
} else if(Class == "Crusader") {
BData <- cscv
} else if(Class == "DemonHunter") {
BData <- dhscv
} else if(Class == "Monk") {
BData <- mscv
} else if(Class == "WitchDoctor") {
BData <- wdscv
} else if(Class == "Wizard") {
BData <- wscv
}
runes <- list(list())
plots <- list()
for (i in 1:length(RuneSample)) {
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
}
multiplot(plots[[1]],plots[[2]], cols = 1)
#return(mp)
})
runeplot(RuneSample, "Barbarian")
shiny::runApp('GitHub/LadderStats/Shiny')
?selectInput
?selectize.js
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
RuneSample <- c("Wrath of the Berserker",
"Battle Rage",
"Call of the Ancients",
"Furious Charge")
RuneSample
runeplot(RuneSample, "Barbarian")
length(RuneSample)
i <- 3
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
plots[[3]]
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
input <- c()
Runes
input$Runes <- RuneSample
input
input$ClassSelect <- "Barbarian"
runeplot(input$Runes,array(input$ClassSelect))
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
RuneSample
runeplot(RuneSample, "Barbarian")
shiny::runApp('GitHub/LadderStats/Shiny')
i <- 3
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
i <- 1
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
i <- 2
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
4 <- 4
i <- 4
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset <-droplevels(runes.subset)
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes[i] <- list(runes.subset[order(runes.subset$Freq, decreasing = T),])
runes[[i]][,3] <- RuneSample[i]
colnames(runes[[i]]) <- c("Rune", "Frequency", "Spell")
plots[[i]] <- ggplot(data = runes[[i]], aes(x = Spell, y = Frequency, fill = Rune, order = -Frequency)) +
geom_bar(stat = "identity", position = "stack")+ coord_flip() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 10, colour = "#F0FFFF", face = "bold"),
plot.background = element_rect(fill = '#222222', colour = '#222222'),
panel.background = element_rect(fill = '#222222', colour = '#222222'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
legend.background = element_rect(fil = '#222222', colour = '#222222'),
legend.text = element_text(size = 9, colour = "#F0FFFF",vjust = 5)
)+
xlab("")+
ylab("")+
ggtitle(as.character(RuneSample[i]))+
scale_fill_discrete(breaks=array((runes[[i]][,1])))
if (length(RuneSample) == 1) mp <- multiplot(plots[[1]], cols = 1)
else if (length(RuneSample) == 2) mp <- multiplot(plots[[1]], plot[[2]], cols = 1)
else if (length(RuneSample) == 3) mp <- multiplot(plots[[1]], plot[[2]], plot[[3]], cols = 1)
else if (length(RuneSample) == 4) mp <- multiplot(plots[[1]], plot[[2]], plot[[3]], plot[[4]], cols = 1)
if (length(RuneSample) == 1) mp <- multiplot(plots[[1]], cols = 1)
if (length(RuneSample) == 2) mp <- multiplot(plots[[1]], plot[[2]], cols = 1)
if (length(RuneSample) == 3) mp <- multiplot(plots[[1]], plot[[2]], plot[[3]], cols = 1)
if (length(RuneSample) == 4) mp <- multiplot(plots[[1]], plot[[2]], plot[[3]], plot[[4]], cols = 1)
length(RuneSample)
if (length(RuneSample) == 4) mp <- multiplot(plots[[1]], plot[[2]], plot[[3]], plot[[4]], cols = 1)
if (length(RuneSample) == 1) mp <- multiplot(plots[[1]], cols = 1)
if (length(RuneSample) == 2) mp <- multiplot(plots[[1]], plots[[2]], cols = 1)
if (length(RuneSample) == 3) mp <- multiplot(plots[[1]], plots[[2]], plots[[3]], cols = 1)
if (length(RuneSample) == 4) mp <- multiplot(plots[[1]], plots[[2]], plots[[3]], plots[[4]], cols = 1)
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
shiny::runApp('GitHub/LadderStats/Shiny')
BData
runes.subset <- BData[which(BData$Spell == RuneSample[i]),c(2,3)]
runes.subset
runes.subset <-droplevels(runes.subset)
data.frame(t(table(runes.subset)))[,c(1,3)]
data.frame(t(table(runes.subset)))
runes.subset <- data.frame(t(table(runes.subset)))[,c(1,3)]
runes.subset
shiny::runApp('GitHub/LadderStats/Shiny')
